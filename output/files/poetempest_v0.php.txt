<?php
require_once 'include/config.inc.php';
require_once "Mail.php";
require_once 'TempestCache.php';


/* 	Two methods to retrieve tempest dataset.
 * 	Initial method is to use the API with PHP DOMDocument as fall back
 * 	if API is unreachable.
 *	
 *	API GET call returns a JSON dataset with current tempests.
 */

$APIGetURL = 'http://poetempest.com/api/v1/current_tempests';
$url = 'http://poetempest.com/';
$id = 'maps';
$notifyTempest = ["turmoil", "radiating", "shining", "corrupting", "corruption", "fortune", "phantoms", "aberrance", "destiny", "fate"];
$result = [];
$mapIndex = 0;

$dom = new DOMDocument;
$dom->loadHTMLFile($url);
$dom->preserveWhiteSpace = false;

if($dataset = $dom->getElementById($id)) {
	foreach($dataset->getElementsByTagName('tr') as $node){
		if($node->parentNode->nodeName != 'thead'){
			$temp = strtolower($node->nodeValue);
			foreach($notifyTempest as $noti){
				if(strpos($temp, $noti)){
					$rowData = $node->getElementsByTagName('td');
					$result[] = array(trim(substr($rowData->item($mapIndex)->nodeValue, 0, strpos($rowData->item($mapIndex)->nodeValue, '(')-1)), $noti);
				}
			}
		} else if($node->parentNode->nodeName == 'thead'){
			$header = $node->getElementsByTagName('th');
			for($i=0; $i<$header->length; $i++){
				if(trim($header->item($i)->nodeValue) == 'Map'){
					$mapIndex = $i;
					break;
				}
			}
		}
	}
	
	if(count($result) > 0){
		$result[] = time();
		if(TempestCache::tempestChanged($result)){
			//Sets Notification based on flag
			if(EMAIL_NOTIFICATION && SMS_NOTIFICATION){
				$to = CONTACT_EMAIL . ', ' . CONTACT_SMS . '@' . CONTACT_SMS_PROVIDER;
			}else if(EMAIL_NOTIFICATION){
				$to = CONTACT_EMAIL;
			}else if(SMS_NOTIFICATION){
				$to = CONTACT_SMS . '@' . CONTACT_SMS_PROVIDER;;
			}else {
				echo 'No notification set. Do nothing!';
				exit;
			}
			
			//Setup email/SMS header, subject, and message
			$subject = 'Tempest Found';	
			$body = 'Tempest Current Active: '."\n\n";
			foreach($result as $map)
				if(is_array($map))
					$body .= 'Map: '.ucfirst($map[0]).' with '.ucfirst($map[1]).' mod active'."\n";
			
			$headers = array ('From' => 'info@poetempest.com', 'To' => $to, 'Subject' => $subject);

			$mail = Mail::factory("mail");
			$mail->send($to, $headers, $body);

			if (PEAR::isError($mail)){
				echo 'Failed to send Tempest notification to '.$to;
				error_log('Failed to send Tempest notification to '.$to, 0);
			} else {
				echo 'Tempest notification email successfully sent!';
			}
		} else
			echo 'No New Tempest Found Within The Hour! Check Previous Email!';
	} else
		echo 'No Tempest found!';
} else {
	echo 'URL Loading Failed: Can not find ID='.$id;
}
?>
